<<<<<<< HEAD
import * as React from 'react';
const ContextKey = Symbol.for(`react-redux-context`);
const gT = typeof globalThis !== "undefined" ? globalThis :
/* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
{};

function getContext() {
  var _gT$ContextKey;

  if (!React.createContext) return {};
  const contextMap = (_gT$ContextKey = gT[ContextKey]) != null ? _gT$ContextKey : gT[ContextKey] = new Map();
  let realContext = contextMap.get(React.createContext);

  if (!realContext) {
    realContext = React.createContext(null);
=======
import { createContext, version as ReactVersion } from 'react';
const ContextKey = Symbol.for(`react-redux-context-${ReactVersion}`);
const gT = globalThis;

function getContext() {
  let realContext = gT[ContextKey];

  if (!realContext) {
    realContext = createContext(null);
>>>>>>> df7c9b00a5cbb1d33d83c7c3004f7fdf0768f37e

    if (process.env.NODE_ENV !== 'production') {
      realContext.displayName = 'ReactRedux';
    }

<<<<<<< HEAD
    contextMap.set(React.createContext, realContext);
=======
    gT[ContextKey] = realContext;
>>>>>>> df7c9b00a5cbb1d33d83c7c3004f7fdf0768f37e
  }

  return realContext;
}

<<<<<<< HEAD
export const ReactReduxContext = /*#__PURE__*/getContext();
=======
export const ReactReduxContext = /*#__PURE__*/new Proxy({}, /*#__PURE__*/new Proxy({}, {
  get(_, handler) {
    const target = getContext(); // @ts-ignore

    return (_target, ...args) => Reflect[handler](target, ...args);
  }

}));
>>>>>>> df7c9b00a5cbb1d33d83c7c3004f7fdf0768f37e
export default ReactReduxContext;
<<<<<<< HEAD
import * as React from 'react'; // React currently throws a warning when using useLayoutEffect on the server.
=======
import { useEffect, useLayoutEffect } from 'react'; // React currently throws a warning when using useLayoutEffect on the server.
>>>>>>> df7c9b00a5cbb1d33d83c7c3004f7fdf0768f37e
// To get around it, we can conditionally useEffect on the server (no-op) and
// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store
// subscription callback always has the selector from the latest render commit
// available, otherwise a store update may happen between render and the effect,
// which may cause missed updates; we also must ensure the store subscription
// is created synchronously, otherwise a store update may occur before the
// subscription is created and an inconsistent state may be observed
// Matches logic in React's `shared/ExecutionEnvironment` file

export const canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
<<<<<<< HEAD
export const useIsomorphicLayoutEffect = canUseDOM ? React.useLayoutEffect : React.useEffect;
=======
export const useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;
>>>>>>> df7c9b00a5cbb1d33d83c7c3004f7fdf0768f37e
